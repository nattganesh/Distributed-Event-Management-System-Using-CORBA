package EventManagementServerApp;


/**
* EventManagementServerApp/ServerInterfacePOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from /Users/gursimransingh/IdeaProjects/DistributedAssignment2/CORBA/src/corbainterface/LibrariesServer.idl
* Saturday, 6 July, 2019 5:23:54 PM EDT
*/

public abstract class ServerInterfacePOA extends org.omg.PortableServer.Servant
 implements EventManagementServerApp.ServerInterfaceOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("addEvent", new java.lang.Integer (0));
    _methods.put ("removeEvent", new java.lang.Integer (1));
    _methods.put ("listEventAvailability", new java.lang.Integer (2));
    _methods.put ("bookEvent", new java.lang.Integer (3));
    _methods.put ("getBookingSchedule", new java.lang.Integer (4));
    _methods.put ("cancelEvent", new java.lang.Integer (5));
    _methods.put ("nonOriginCustomerBooking", new java.lang.Integer (6));
    _methods.put ("swapEvent", new java.lang.Integer (7));
    _methods.put ("eventAvailable", new java.lang.Integer (8));
    _methods.put ("validateBooking", new java.lang.Integer (9));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // EventManagementServerApp/ServerInterface/addEvent
       {
         String eventID = in.read_string ();
         String eventType = in.read_string ();
         String bookingCapacity = in.read_string ();
         String managerID = in.read_string ();
         String $result = null;
         $result = this.addEvent (eventID, eventType, bookingCapacity, managerID);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 1:  // EventManagementServerApp/ServerInterface/removeEvent
       {
         String eventID = in.read_string ();
         String eventType = in.read_string ();
         String managerID = in.read_string ();
         String $result = null;
         $result = this.removeEvent (eventID, eventType, managerID);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 2:  // EventManagementServerApp/ServerInterface/listEventAvailability
       {
         String eventType = in.read_string ();
         String managerID = in.read_string ();
         String $result = null;
         $result = this.listEventAvailability (eventType, managerID);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 3:  // EventManagementServerApp/ServerInterface/bookEvent
       {
         String customerID = in.read_string ();
         String eventID = in.read_string ();
         String eventType = in.read_string ();
         String bookingAmount = in.read_string ();
         String $result = null;
         $result = this.bookEvent (customerID, eventID, eventType, bookingAmount);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 4:  // EventManagementServerApp/ServerInterface/getBookingSchedule
       {
         String customerID = in.read_string ();
         String managerID = in.read_string ();
         String $result = null;
         $result = this.getBookingSchedule (customerID, managerID);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 5:  // EventManagementServerApp/ServerInterface/cancelEvent
       {
         String customerID = in.read_string ();
         String eventID = in.read_string ();
         String eventType = in.read_string ();
         String $result = null;
         $result = this.cancelEvent (customerID, eventID, eventType);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 6:  // EventManagementServerApp/ServerInterface/nonOriginCustomerBooking
       {
         String customerID = in.read_string ();
         String eventID = in.read_string ();
         String $result = null;
         $result = this.nonOriginCustomerBooking (customerID, eventID);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 7:  // EventManagementServerApp/ServerInterface/swapEvent
       {
         String customerID = in.read_string ();
         String newEventID = in.read_string ();
         String newEventType = in.read_string ();
         String oldEventID = in.read_string ();
         String oldEventType = in.read_string ();
         String $result = null;
         $result = this.swapEvent (customerID, newEventID, newEventType, oldEventID, oldEventType);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 8:  // EventManagementServerApp/ServerInterface/eventAvailable
       {
         String eventID = in.read_string ();
         String eventType = in.read_string ();
         String $result = null;
         $result = this.eventAvailable (eventID, eventType);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 9:  // EventManagementServerApp/ServerInterface/validateBooking
       {
         String customerID = in.read_string ();
         String eventID = in.read_string ();
         String eventType = in.read_string ();
         String $result = null;
         $result = this.validateBooking (customerID, eventID, eventType);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:EventManagementServerApp/ServerInterface:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public ServerInterface _this() 
  {
    return ServerInterfaceHelper.narrow(
    super._this_object());
  }

  public ServerInterface _this(org.omg.CORBA.ORB orb) 
  {
    return ServerInterfaceHelper.narrow(
    super._this_object(orb));
  }


} // class ServerInterfacePOA
